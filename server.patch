diff --git a/server.js b/server.js
index fed7cd319649e7c5e568a4fb815cc4ee63a8df3d..743a705e78150298ecd6b7bc0480ed9c7d1b72e3 100644
--- a/server.js
+++ b/server.js
@@ -35,105 +35,136 @@ async function getTopTickers(limit) {
     if (!seen.has(t)) { seen.add(t); out.push(t); }
   }
   if (!out.length) throw new Error('No S&P500 tickers scraped');
   return out.slice(0, limit);
 }
 
 // EOD historia z paginacją (desc)
 async function fetchEodHistory(ticker, needed, apiKey) {
   const all = [];
   let next = null;
   const pageSize = 100;
   do {
     const url = `https://api-v2.intrinio.com/securities/${encodeURIComponent(ticker)}/prices` +
       `?sort_order=desc&page_size=${pageSize}` + (next ? `&next_page=${encodeURIComponent(next)}` : ``) +
       `&api_key=${apiKey}`;
     const r = await fetch(url);
     if (!r.ok) break;
     const j = await r.json();
     const rows = Array.isArray(j.stock_prices) ? j.stock_prices : [];
     all.push(...rows);
     next = j.next_page || null;
   } while (all.length < needed + 1 && next);
   return all;
 }
 
-// Hour: ostatnia dostępna zmiana z 15m barów (okno 60 min)
-async function hourlyFrom15m(ticker, apiKey) {
+// Pobranie ostatniej ceny z 15‑minutowych interwałów (okno 6h)
+async function latestPrice15m(ticker, apiKey) {
   try {
-    const end = new Date(), start = new Date(end.getTime() - 60*60*1000);
+    const end = new Date();
+    const start = new Date(end.getTime() - 6 * 60 * 60 * 1000);
     const s = nyFormat(start), e = nyFormat(end);
     const url = `https://api-v2.intrinio.com/securities/${encodeURIComponent(ticker)}/prices/intervals` +
       `?interval_size=15m&source=delayed&timezone=America/New_York` +
       `&start_date=${s.date}&start_time=${s.time}&end_date=${e.date}&end_time=${e.time}` +
-      `&split_adjusted=false&include_quote_only_bars=false&page_size=10&api_key=${apiKey}`;
+      `&split_adjusted=false&include_quote_only_bars=false&page_size=100&api_key=${apiKey}`;
+    const r = await fetch(url);
+    if (!r.ok) return null;
+    const j = await r.json();
+    const arr = Array.isArray(j.intervals) ? j.intervals : [];
+    const last = arr.length ? arr[arr.length - 1] : null;
+    const price = Number(last && last.close);
+    return Number.isFinite(price) ? price : null;
+  } catch {
+    return null;
+  }
+}
+
+// Zmiana godzinowa na podstawie 15‑minutowych barów (5 kwartałów wstecz)
+async function hourlyChangeFrom15m(ticker, apiKey) {
+  try {
+    const end = new Date();
+    const start = new Date(end.getTime() - 2 * 60 * 60 * 1000); // okno 2h
+    const s = nyFormat(start), e = nyFormat(end);
+    const url = `https://api-v2.intrinio.com/securities/${encodeURIComponent(ticker)}/prices/intervals` +
+      `?interval_size=15m&source=delayed&timezone=America/New_York` +
+      `&start_date=${s.date}&start_time=${s.time}&end_date=${e.date}&end_time=${e.time}` +
+      `&split_adjusted=false&include_quote_only_bars=false&page_size=100&api_key=${apiKey}`;
     const r = await fetch(url);
     if (!r.ok) return { ticker, price: null, changePercent: null };
     const j = await r.json();
     const arr = Array.isArray(j.intervals) ? j.intervals : [];
-    const last = arr.length ? arr[arr.length-1] : null;
-    const price = last && typeof last.close === 'number' ? last.close : null;
+    if (!arr.length) return { ticker, price: null, changePercent: null };
+    const last = arr[arr.length - 1];
+    const prev = arr.length > 5 ? arr[arr.length - 6] : arr[0];
+    const price = Number(last && last.close);
+    const prevClose = Number(prev && prev.close);
     let changePercent = null;
-    for (let i = arr.length-1; i >= 0; i--) {
-      const v = arr[i];
-      if (v && typeof v.change === 'number' && isFinite(v.change)) { changePercent = v.change * 100; break; }
+    if (Number.isFinite(price) && Number.isFinite(prevClose) && prevClose) {
+      changePercent = ((price - prevClose) / prevClose) * 100;
     }
-    return { ticker, price, changePercent };
-  } catch { return { ticker, price: null, changePercent: null }; }
+    return { ticker, price: Number.isFinite(price) ? price : null, changePercent };
+  } catch {
+    return { ticker, price: null, changePercent: null };
+  }
 }
 
-// EOD: porównanie do 1/5/21/252 sesji wstecz (z historią stronicowaną)
-async function eodChangeByIndex(ticker, idx, apiKey) {
+// Porównanie bieżącej ceny z zamknięciem sprzed n sesji
+async function changeFromEodToLatest(ticker, idx, apiKey) {
   try {
+    const priceRaw = await latestPrice15m(ticker, apiKey);
+    const price = Number.isFinite(priceRaw) ? priceRaw : null;
+    if (price === null) return { ticker, price: null, changePercent: null };
     const hist = await fetchEodHistory(ticker, idx, apiKey);
-    if (!hist.length) return { ticker, price: null, changePercent: null };
-    const latest = hist[0];
+    if (!hist.length) return { ticker, price, changePercent: null };
     const prev = hist.length > idx ? hist[idx] : hist[hist.length - 1];
-    const price = (latest && typeof latest.close === 'number') ? latest.close : null;
+    const prevClose = Number(prev && prev.close);
     let changePercent = null;
-    if (prev && typeof prev.close === 'number' && prev.close && typeof price === 'number') {
-      changePercent = ((price - prev.close) / prev.close) * 100;
+    if (Number.isFinite(prevClose) && prevClose) {
+      changePercent = ((price - prevClose) / prevClose) * 100;
     }
     return { ticker, price, changePercent };
-  } catch { return { ticker, price: null, changePercent: null }; }
+  } catch {
+    return { ticker, price: null, changePercent: null };
+  }
 }
 
 // ===== API =====
 app.get('/api/sp500', async (req, res) => {
   const apiKey = process.env.INTRINIO_API_KEY;
   if (!apiKey) return res.status(500).json({ error: 'INTRINIO_API_KEY missing' });
 
   const range = (req.query.range || 'day').toLowerCase();
   const limitParam = parseInt(req.query.limit, 10);
   const LIMIT = Math.max(1, Math.min(100, Number.isFinite(limitParam) ? limitParam : 10)); // domyślnie 10
   const CONCURRENCY = Math.min(LIMIT, 10);
   const compareMap = { day: 1, week: 5, month: 21, year: 252 };
 
   try {
     const tickers = await getTopTickers(LIMIT); // <<< tylko LIMIT spółek
     const out = [];
 
     if (range === 'hour') {
       for (let i = 0; i < tickers.length; i += CONCURRENCY) {
         // eslint-disable-next-line no-await-in-loop
-        out.push(...await Promise.all(tickers.slice(i, i + CONCURRENCY).map(t => hourlyFrom15m(t, apiKey))));
+        out.push(...await Promise.all(tickers.slice(i, i + CONCURRENCY).map(t => hourlyChangeFrom15m(t, apiKey))));
       }
     } else {
       const idx = compareMap[range] ?? 1;
       for (let i = 0; i < tickers.length; i += CONCURRENCY) {
         // eslint-disable-next-line no-await-in-loop
-        out.push(...await Promise.all(tickers.slice(i, i + CONCURRENCY).map(t => eodChangeByIndex(t, idx, apiKey))));
+        out.push(...await Promise.all(tickers.slice(i, i + CONCURRENCY).map(t => changeFromEodToLatest(t, idx, apiKey))));
       }
     }
 
     // bezpieczeństwo: twarde przycięcie do LIMIT
     res.json(out.filter(x => x && x.ticker).slice(0, LIMIT));
   } catch (e) {
     console.error(e);
     res.status(500).json({ error: e.message || 'Failed to build S&P500 data' });
   }
 });
 
 // Fallback
 app.get('*', (_req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
 
 app.listen(PORT, () => console.log(`[airanges] listening on :${PORT}`));
