cat > server-range.patch <<'PATCH'
diff --git a/server.js b/server.js
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/server.js
@@ -0,0 +208 @@
+'use strict';
+const express = require('express');
+const path = require('path');
+
+// Node 18+ ma globalny fetch; jeśli nie, użyj node-fetch (masz w package.json)
+const fetch = global.fetch ? global.fetch
+  : ((...args) => import('node-fetch').then(({ default: f }) => f(...args)));
+
+const app = express();
+const PORT = process.env.PORT || 3000;
+
+// --- Statyczne pliki i prosty healthcheck ---
+app.use(express.static(path.join(__dirname, 'public')));
+app.get('/', (_req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
+app.get('/api/health', (_req, res) => res.json({ ok: true }));
+
+// ======== /api/sp500: ranges hour | day | week | month | year ========
+app.get('/api/sp500', async (req, res) => {
+  const apiKey = process.env.INTRINIO_API_KEY;
+  if (!apiKey) return res.status(500).json({ error: 'INTRINIO_API_KEY is not set' });
+  const range = (req.query.range || 'day').toLowerCase();
+
+  // Top ~100 tickerów S&P500 z SlickCharts
+  async function getTopTickers() {
+    const resp = await fetch('https://www.slickcharts.com/sp500', { headers: { 'User-Agent': 'airanges/1.0' } });
+    if (!resp.ok) throw new Error(`SlickCharts HTTP ${resp.status}`);
+    const html = await resp.text();
+    const rx = /\/symbol\/([A-Za-z\.]+)\"/g;
+    const out = []; const seen = new Set();
+    let m;
+    while ((m = rx.exec(html)) && out.length < 100) {
+      const t = m[1];
+      if (!seen.has(t)) { seen.add(t); out.push(t); }
+    }
+    if (!out.length) throw new Error('S&P 500 tickers not found');
+    return out;
+  }
+
+  // Format czasu w strefie NY (dla Intrinio intervals API)
+  function formatInTZ(d, tz = 'America/New_York') {
+    const p = new Intl.DateTimeFormat('en-CA', {
+      timeZone: tz, hour12: false,
+      year:'numeric', month:'2-digit', day:'2-digit',
+      hour:'2-digit', minute:'2-digit', second:'2-digit'
+    }).formatToParts(d).reduce((a, q) => (a[q.type]=q.value, a), {});
+    return { date: `${p.year}-${p.month}-${p.day}`, time: `${p.hour}:${p.minute}:${p.second}` };
+  }
+
+  // Godzinówka: ostatnia dostępna zmiana z 15-min barów w oknie 60 min
+  async function fetchHourlyChange(ticker) {
+    try {
+      const end = new Date(), start = new Date(end.getTime() - 60*60*1000);
+      const s = formatInTZ(start), e = formatInTZ(end);
+      const url = `https://api-v2.intrinio.com/securities/${encodeURIComponent(ticker)}` +
+        `/prices/intervals?interval_size=15m&source=delayed&timezone=America/New_York` +
+        `&start_date=${s.date}&start_time=${s.time}&end_date=${e.date}&end_time=${e.time}` +
+        `&split_adjusted=false&include_quote_only_bars=false&page_size=10&api_key=${apiKey}`;
+      const r = await fetch(url);
+      if (!r.ok) return { ticker, price:null, changePercent:null };
+      const j = await r.json();
+      const arr = Array.isArray(j.intervals) ? j.intervals : [];
+      const last = arr.length ? arr[arr.length-1] : null;
+      const price = last && typeof last.close === 'number' ? last.close : null;
+      let changePercent = null;
+      for (let i=arr.length-1;i>=0;i--) {
+        const v = arr[i];
+        if (v && typeof v.change === 'number' && isFinite(v.change)) { changePercent = v.change*100; break; }
+      }
+      return { ticker, price, changePercent };
+    } catch {
+      return { ticker, price:null, changePercent:null };
+    }
+  }
+
+  // EOD: porównanie do 1/5/21/252 sesji wstecz
+  async function fetchEodChange(ticker, idx) {
+    try {
+      const url = `https://api-v2.intrinio.com/securities/${encodeURIComponent(ticker)}` +
+        `/prices?sort_order=desc&page_size=${idx+1}&api_key=${apiKey}`;
+      const r = await fetch(url);
+      if (!r.ok) return { ticker, price:null, changePercent:null };
+      const j = await r.json();
+      const rows = Array.isArray(j.stock_prices) ? j.stock_prices : [];
+      if (!rows.length) return { ticker, price:null, changePercent:null };
+      const latest = rows[0], prev = rows.length>idx ? rows[idx] : null;
+      const price = latest && typeof latest.close === 'number' ? latest.close : null;
+      let changePercent = null;
+      if (prev && typeof prev.close === 'number' && prev.close && typeof price === 'number') {
+        changePercent = ((price - prev.close)/prev.close)*100;
+      }
+      return { ticker, price, changePercent };
+    } catch {
+      return { ticker, price:null, changePercent:null };
+    }
+  }
+
+  const compareMap = { day:1, week:5, month:21, year:252 };
+
+  try {
+    const tickers = await getTopTickers();
+    const jobs = tickers.map(t => range==='hour'
+      ? fetchHourlyChange(t)
+      : fetchEodChange(t, compareMap[range] ?? 1));
+    res.json(await Promise.all(jobs));
+  } catch (e) {
+    console.error(e);
+    res.status(500).json({ error: e.message || 'Failed to fetch S&P500 data' });
+  }
+});
+
+// Fallback
+app.get('*', (_req, res) => {
+  res.sendFile(path.join(__dirname, 'public', 'index.html'));
+});
+
+app.listen(PORT, () => console.log(`[airanges] listening on :${PORT}`));
PATCH
